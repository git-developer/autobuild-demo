#!/bin/bash
#
# Build script for Autobuilds on Docker Hub
#
# Automatically sets labels according to the
# [annotation](https://github.com/opencontainers/image-spec/blob/master/annotations.md)
# convention of the Open Container Initiative (OCI) image specification.
# Metadata is taken from environment variables on Docker Hub,
# and additionally fetched from GitHub if available.
#
# Required environment variables (implicitly available on Docker Hub):
# - SOURCE_REPOSITORY_URL
# - SOURCE_BRANCH
# - SOURCE_COMMIT
# - DOCKER_REPO
# - DOCKERFILE_PATH
# - DOCKER_TAG
# - IMAGE_NAME
#
set -eu

lacks() {
    ! command -v "${1}" >/dev/null
}

value_of() {
    echo "${GITHUB_REPO_METADATA}" | jq -r "${1} // empty"
}

collect_dockerhub_metadata() {
    DOCKER_REPO_OWNER="${DOCKER_REPO%/*}"
    IMAGE_VENDOR="${DOCKER_REPO_OWNER##*/}"
    IMAGE_TITLE="${DOCKER_REPO##*/}"
    IMAGE_VERSION="${DOCKER_TAG}"
    IMAGE_REVISION="${SOURCE_COMMIT}"
    IMAGE_CREATED="$(date -u --rfc-3339 seconds)"
    IMAGE_REF_NAME="${SOURCE_BRANCH}"
}

collect_github_metadata() {
    if lacks jq || lacks wget; then
        apt-get -q update
        apt-get -q install -y jq wget
        if lacks jq || lacks wget; then
            >&2 echo 'Ignoring GitHub metadata because of missing dependencies. Required: [jq, wget]'
        fi
    elif [ -n "${SOURCE_REPOSITORY_URL-}" ]; then
        SOURCE_OWNER_URL="${SOURCE_REPOSITORY_URL%/*}"
        SOURCE_OWNER_NAME="${SOURCE_OWNER_URL##*/}"
        SOURCE_REPO_NAME="${SOURCE_REPOSITORY_URL##*/}"

        github_metadata_url="https://api.github.com/repos/${SOURCE_OWNER_NAME}/${SOURCE_REPO_NAME}"
        if wget -q --spider "${github_metadata_url}"; then
            GITHUB_REPO_METADATA=$(wget -q -O - "${github_metadata_url}")

            GITHUB_OWNER_URL="$(   value_of .owner.html_url)"
            GITHUB_URL="$(         value_of .html_url)"
            GITHUB_DESCRIPTION="$( value_of .description)"
            GITHUB_LICENSE="$(     value_of .license.spdx_id)"

            IMAGE_DESCRIPTION="${GITHUB_DESCRIPTION}"
            IMAGE_URL="${GITHUB_URL}"
            IMAGE_DOCUMENTATION="${IMAGE_URL:+${IMAGE_URL}#readme}"
            IMAGE_LICENSES="${GITHUB_LICENSE}"
            IMAGE_AUTHORS="${GITHUB_OWNER_URL}"
        fi
    fi
}

start_build() {
    docker build \
    --file  "${DOCKERFILE_PATH}" \
    --tag   "${IMAGE_NAME}" \
    --label "org.opencontainers.image.vendor=${IMAGE_VENDOR}" \
    --label "org.opencontainers.image.title=${IMAGE_TITLE}" \
    --label "org.opencontainers.image.version=${IMAGE_VERSION}" \
    ${IMAGE_CREATED:+--label "org.opencontainers.image.created=${IMAGE_CREATED}"} \
    ${IMAGE_AUTHORS:+--label "org.opencontainers.image.authors=${IMAGE_AUTHORS}"} \
    ${IMAGE_URL:+--label "org.opencontainers.image.url=${IMAGE_URL}"} \
    ${IMAGE_DOCUMENTATION:+--label "org.opencontainers.image.documentation=${IMAGE_DOCUMENTATION}"} \
    ${IMAGE_REVISION:+--label "org.opencontainers.image.revision=${IMAGE_REVISION}"} \
    ${IMAGE_LICENSES:+--label "org.opencontainers.image.licenses=${IMAGE_LICENSES}"} \
    ${IMAGE_REF_NAME:+--label "org.opencontainers.image.ref.name=${IMAGE_REF_NAME}"} \
    ${IMAGE_DESCRIPTION:+--label "org.opencontainers.image.description=${IMAGE_DESCRIPTION}"} \
    .
}

collect_dockerhub_metadata
collect_github_metadata
start_build

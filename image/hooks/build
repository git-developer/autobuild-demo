#!/bin/sh
#
# Build script for Autobuilds on Docker Hub
#
# Automatically sets labels according to the
# [annotation](https://github.com/opencontainers/image-spec/blob/master/annotations.md)
# convention of the Open Container Initiative (OCI) image specification.
# Metadata is taken from environment variables on Docker Hub,
# and additionally fetched from GitHub if available.
#
# Required environment variables (implicitly available on Docker Hub):
# - SOURCE_REPOSITORY_URL
# - SOURCE_BRANCH
# - SOURCE_COMMIT
# - DOCKER_REPO
# - DOCKERFILE_PATH
# - DOCKER_TAG
# - IMAGE_NAME
#
set -eu

collect_dockerhub_metadata() {
    local docker_repo_owner="${DOCKER_REPO%/*}"
    IMAGE_VENDOR="${docker_repo_owner##*/}"
    IMAGE_TITLE="${DOCKER_REPO##*/}"
    IMAGE_VERSION="${DOCKER_TAG}"
    IMAGE_REVISION="${SOURCE_COMMIT}"
    IMAGE_CREATED="$(date -u --rfc-3339 seconds)"
    IMAGE_REF_NAME="${SOURCE_BRANCH}"
}

collect_github_metadata() {
    if [ -z "${SOURCE_REPOSITORY_URL-}" ]; then
        >&2 echo 'Skipping GitHub metadata because of missing URL to git repository.'
        return 0
    fi

    lacks() { ! command -v "${1}" >/dev/null; }
    if lacks wget || lacks jq; then
        apt-get -q update
        apt-get -q install -y wget jq
    fi
    if lacks wget || lacks jq; then
        >&2 echo 'Skipping GitHub metadata because of missing dependencies. Required: [wget, jq]'
        return 0
    fi

    local source_owner_url="${SOURCE_REPOSITORY_URL%/*}"
    local source_owner_name="${source_owner_url##*/}"
    local source_repo_name="${SOURCE_REPOSITORY_URL##*/}"
    local github_metadata_url="https://api.github.com/repos/${source_owner_name}/${source_repo_name}"
    if ! wget -q --spider "${github_metadata_url}"; then
        >&2 echo "No GitHub repository metadata was found at ${github_metadata_url}"
        return 0
    fi

    local github_repo_metadata="$(wget -q -O - "${github_metadata_url}")"
    value_of() { echo "${github_repo_metadata}" | jq -r "${1} // empty"; }
    IMAGE_DESCRIPTION="$(value_of .description)"
    IMAGE_URL="$(value_of .html_url)"
    IMAGE_DOCUMENTATION="${IMAGE_URL:+${IMAGE_URL}#readme}"
    IMAGE_LICENSES="$(value_of .license.spdx_id)"
    IMAGE_AUTHORS="$(value_of .owner.html_url)"
}

start_build() {
    local oci='org.opencontainers.image'
    docker build \
    --file  "${DOCKERFILE_PATH}" \
    --tag   "${IMAGE_NAME}" \
    --label "${oci}.vendor=${IMAGE_VENDOR}" \
    --label "${oci}.title=${IMAGE_TITLE}" \
    --label "${oci}.version=${IMAGE_VERSION}" \
    ${IMAGE_CREATED:+--label "${oci}.created=${IMAGE_CREATED}"} \
    ${IMAGE_AUTHORS:+--label "${oci}.authors=${IMAGE_AUTHORS}"} \
    ${IMAGE_URL:+--label "${oci}.url=${IMAGE_URL}"} \
    ${IMAGE_DOCUMENTATION:+--label "${oci}.documentation=${IMAGE_DOCUMENTATION}"} \
    ${IMAGE_REVISION:+--label "${oci}.revision=${IMAGE_REVISION}"} \
    ${IMAGE_LICENSES:+--label "${oci}.licenses=${IMAGE_LICENSES}"} \
    ${IMAGE_REF_NAME:+--label "${oci}.ref.name=${IMAGE_REF_NAME}"} \
    ${IMAGE_DESCRIPTION:+--label "${oci}.description=${IMAGE_DESCRIPTION}"} \
    .
}

collect_dockerhub_metadata
collect_github_metadata
start_build

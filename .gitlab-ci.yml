variables:
  BUILD_CONTEXT:   "image"
  IMAGE_VERSION:   "latest"
  IMAGE_PLATFORMS: "linux/amd64,linux/arm64,linux/arm/v7"

stages:
  - prepare
  - build

Collect Image Metadata:
  stage: prepare
  image: alpine
  variables:
    IMAGE_NAME:      "${CI_PROJECT_PATH}:${IMAGE_VERSION}"
    IMAGE_VENDOR:    "${CI_PROJECT_NAMESPACE}"
    IMAGE_TITLE:     "${CI_PROJECT_TITLE}"
    IMAGE_URL:       "${CI_PROJECT_URL}"
    IMAGE_REVISION:  "${CI_COMMIT_SHA}"
    IMAGE_REF_NAME:  "${CI_COMMIT_REF_NAME}"
  before_script:
    - set -euo pipefail
    - apk add coreutils wget jq
  script:
    - gitlab_project_metadata="$(wget -q -O - "${CI_SERVER_URL}/api/v4/projects/${CI_PROJECT_ID}?license=yes")"
    - value_of() { echo "${gitlab_project_metadata}" | jq -r "${1} // empty"; }
    - owner_url="$(                 value_of .namespace.web_url)"
    - export IMAGE_LICENSES="$(     value_of .license.key)"
    - export IMAGE_DESCRIPTION="$(  value_of .description)"
    - export IMAGE_DOCUMENTATION="$(value_of .readme_url)"
    - export IMAGE_AUTHORS="${GITLAB_USER_LOGIN}${owner_url:+ <${owner_url}>}"
    - export IMAGE_CREATED="$(date -u --rfc-3339 seconds)"
    - set | grep '^IMAGE_' >image-metadata
  artifacts:
    paths:
      - image-metadata
    expire_in: "1 hour"

.build:.before_script:.configure_multiarch_builder: &configure_multiarch_builder |
  docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
  mkdir -p ~/.docker/cli-plugins
  wget -q -O ~/.docker/cli-plugins/docker-buildx "https://github.com/docker/buildx/releases/download/${BUILDX_VERSION}/buildx-${BUILDX_VERSION}.linux-amd64"
  chmod +x ~/.docker/cli-plugins/docker-buildx
  docker buildx create --use --name builder

.build:.before_script:.configure_docker_auth_config: &configure_docker_auth_config |
  export GPG_PASSPHRASE="${GPG_PASSPHRASE:-$(cat /dev/urandom | tr -dc 'a-zA-Z0-9!#%&*+,-./:;<=>?@^_~;' | fold -w 64 | head -n 1)}"
  wget -q -O - "https://github.com/docker/docker-credential-helpers/releases/download/${DOCKER_CREDENTIAL_PASS_VERSION}/docker-credential-pass-${DOCKER_CREDENTIAL_PASS_VERSION}-amd64.tar.gz" | tar -C /usr/bin -xz
  chmod +x /usr/bin/docker-credential-pass
  apk add --no-cache -X http://dl-cdn.alpinelinux.org/alpine/edge/testing gnupg pass bash
  cat <<EOF | gpg --batch --gen-key
  Key-Type: 1
  Name-Real: docker-credential-pass
  Passphrase: ${GPG_PASSPHRASE}
  EOF
  gpg --list-keys docker-credential-pass | grep -o '^\s\(.*\)' | tr -d ' ' | xargs pass init
  echo 'pass is initialized' | pass insert -e docker-credential-helpers/docker-pass-initialized-check
  bash -c '<<<"${GPG_PASSPHRASE}" gpg --passphrase-fd 0 --pinentry-mode loopback -d ~/.password-store/docker-credential-helpers/docker-pass-initialized-check.gpg'
  unset GPG_PASSPHRASE
  mkdir -p ~/.docker
  echo "{\"credsStore\":\"pass\"}" >~/.docker/config.json

Multiarch Build:
  stage: build
  variables:
    DOCKER_TAG:     "19.03.8"
    BUILDX_VERSION: "v0.3.1"
    DOCKER_CREDENTIAL_PASS_VERSION: "v0.6.3"
    DOCKER_CLI_EXPERIMENTAL: "enabled"
  image: "docker:${DOCKER_TAG}"
  services:
    - name: "docker:${DOCKER_TAG}-dind"
  before_script:
    - set -euo pipefail
    - . ./image-metadata
    - *configure_multiarch_builder
    - *configure_docker_auth_config
    - apk add bash && bash -c '<<<"${CI_REGISTRY_PASSWORD}" docker login -u "${CI_REGISTRY_USER}" --password-stdin "${CI_REGISTRY}"'
  script:
    - oci='org.opencontainers.image'
    - docker buildx build >-
        --platform "${IMAGE_PLATFORMS}"
        --tag "${CI_REGISTRY_IMAGE}"
        --push
        --label "${oci}.vendor=${IMAGE_VENDOR}"
        --label "${oci}.title=${IMAGE_TITLE}"
        --label "${oci}.version=${IMAGE_VERSION}"
        ${IMAGE_CREATED:+--label "${oci}.created=${IMAGE_CREATED}"}
        ${IMAGE_AUTHORS:+--label "${oci}.authors=${IMAGE_AUTHORS}"}
        ${IMAGE_URL:+--label "${oci}.url=${IMAGE_URL}"}
        ${IMAGE_DOCUMENTATION:+--label "${oci}.documentation=${IMAGE_DOCUMENTATION}"}
        ${IMAGE_REVISION:+--label "${oci}.revision=${IMAGE_REVISION}"}
        ${IMAGE_LICENSES:+--label "${oci}.licenses=${IMAGE_LICENSES}"}
        ${IMAGE_REF_NAME:+--label "${oci}.ref.name=${IMAGE_REF_NAME}"}
        ${IMAGE_DESCRIPTION:+--label "${oci}.description=${IMAGE_DESCRIPTION}"}
        "${BUILD_CONTEXT}"
  after_script:
    - docker logout
